[project]
name = "flute-server"
description = "Flask API server for Flute application"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]

dependencies = [
    "flask>=2.3.0",
    "flask-sqlalchemy>=3.0.0",
    "flask-pydantic>=0.12.0",
    "pydantic[email]>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "more_itertools>=10.0.0",
    "jaconv>=0.4.0",
    "natto-py>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
]
ignore = [
    "E501",   # line-too-long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "ARG001", # unused function argument (common in Flask routes)
    "TC003",  # type-checking block doesn't work well with sqlalchemy declarative mapping
    "B027",   # sometimes empty methods are fine
]

[tool.ruff.lint.per-file-ignores]
"test/**/*.py" = ["ARG001", "S101"]  # Allow assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
